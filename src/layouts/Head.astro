---
import { ClientRouter } from 'astro:transitions'
import { siteConfig } from '~/utils/site-config'

export type Props = {
  postTitle?: string
  postDescription?: string
}

const { postTitle, postDescription } = Astro.props

// Site Configuration
const { title, subtitle, description, author, url, favicon, image, keywords } =
  siteConfig.site
const { verification = {} } = siteConfig.seo ?? {}
const { mode, light, dark } = siteConfig.color
const { google, bing, yandex, baidu } = verification

// Site Metadata
const initialTheme = mode === 'dark' ? dark : light
const colorScheme = mode
const siteTitle = title
const siteSubtitle = subtitle
const siteDescription = description

// Page Metadata
const pageTitle = postTitle
  ? `${postTitle} - ${siteTitle}`
  : `${siteTitle} - ${siteSubtitle}`
const pageDescription = postDescription || siteDescription
const pageImage = image
const pageKeywords = keywords.join(',')
---

<!-- Basic Info -->
<meta charset="utf-8" />
<meta
  name="viewport"
  content="width=device-width, initial-scale=1, viewport-fit=cover"
/>
{
  favicon.toLowerCase().endsWith('.svg') && (
    <link rel="icon" type="image/svg+xml" href={favicon} />
  )
}
{
  favicon.toLowerCase().endsWith('.png') && (
    <link rel="icon" type="image/png" href={favicon} />
  )
}
{
  favicon.toLowerCase().endsWith('.ico') && (
    <link rel="icon" type="image/x-icon" href={favicon} />
  )
}
<title>{pageTitle}</title>
<meta name="description" content={pageDescription} />
<meta name="author" content={author} />
<meta name="color-scheme" content={colorScheme} />
<meta name="theme-color" content={initialTheme} />
<meta name="keywords" content={pageKeywords} />

<!-- Preload -->
<link
  rel="preload"
  href="/fonts/Satoshi-Variable.woff2"
  as="font"
  type="font/woff2"
  crossorigin
/>

<!-- Site Links -->
<link rel="canonical" href={Astro.url} />
<link rel="sitemap" href="/sitemap-index.xml" />

<!-- Open Graph -->
<meta property="og:type" content={postTitle ? 'article' : 'website'} />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={pageTitle} />
<meta property="og:description" content={pageDescription} />
<meta property="og:image" content={pageImage} />
<meta name="twitter:card" content="summary_large_image" />

<!-- Site Verification -->
{google && <meta name="google-site-verification" content={google} />}
{bing && <meta name="msvalidate.01" content={bing} />}
{yandex && <meta name="yandex-verification" content={yandex} />}
{baidu && <meta name="baidu-site-verification" content={baidu} />}

<!-- Global View Transition -->
<ClientRouter fallback="none" />

<!-- Theme Toggle -->
<script
  is:inline
  define:vars={{
    mode,
    dark,
    light,
  }}
>
  ;(function () {
    // Check if current theme is dark
    // Priority: localStorage theme > default theme > system preference
    function isDarkMode() {
      const currentTheme = localStorage.getItem('theme')
      if (currentTheme) {
        return currentTheme === 'dark'
      }

      if (mode !== 'auto') {
        return mode === 'dark'
      }

      // If defaultMode is auto, follow system preference
      return window.matchMedia('(prefers-color-scheme: dark)').matches
    }

    // Initialize theme
    function initTheme(doc = document) {
      const isDark = isDarkMode()
      doc.documentElement.classList.toggle('dark', isDark)

      // Update meta theme-color tag
      const metaThemeColor = doc.head.querySelector('meta[name="theme-color"]')
      const metaColorScheme = doc.head.querySelector(
        'meta[name="color-scheme"]',
      )
      if (metaThemeColor) {
        metaThemeColor.setAttribute('content', isDark ? dark : light)
      }
      if (metaColorScheme) {
        metaColorScheme.setAttribute('content', isDark ? 'dark' : 'light')
      }
    }

    // Update theme before page transition to prevent flashing
    document.addEventListener('astro:before-swap', ({ newDocument }) => {
      initTheme(newDocument)
    })

    // Initialize theme on first load
    initTheme()

    // Listen system changes
    if (mode === 'auto') {
      const media = window.matchMedia('(prefers-color-scheme: dark)')
      media.addEventListener('change', () => {
        if (!localStorage.getItem('theme')) {
          initTheme()
        }
      })
    }
  })()
</script>
